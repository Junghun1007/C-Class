--------------------------------------- 형 변환, 상수

	상수 : 항상 같은 수, 변경할 수 없는 데이터
	리터럴 상수 : 사용자가 입력하는 문자 그대로를 의미 한다. 
						문자, 정수, 실수, 문자열 그 자체
	심볼릭 상수 : 이름을 가지고 있는 상수, 선언 시 자료형의 
						앞이나 뒤에 const 구문 추가하고 동시에 초기화
	ex)
		int const con = 15; 

	
	형 변환 : C언어에서 연산이 진행될 때 모든 값이 같은 타입으로 자료형 변환후 연산이
				진행되는데 이를 형 변환이라고 한다.
	1. 자동 형 변환 : 컴파일러가 데이터의 손실이 적은 자료형으로 자동으로 진행
						char < short < int < long < float < double 순서로 진행
		ex)
			printf("연산 결과 : %f\n", 3 + 3.0);
		
		
	2. 강제 형 변환 : 사용자가 캐스트 연산자를 사용해 강제적으로 수행하는 형 변환
						변환 하고싶은 데이터 앞에 (변환할 자료형)을 작성해주면됨
		ex)
			printf("연산 결과 : %d\n", 3 + (int)3.4);

------------------------------------------------- 연산자

	산술 연산자 

	+ : 왼쪽의 피연산자에서 오른쪽의 피연산자를 더함
	- : 왼쪽의 피연산자에서 오른쪽의 피연산자를 뺌
	* : 왼쪽의 피연산자에서 오른쪽의 피연산자를 곱함
	/ : 왼쪽의 피연산자에서 오른쪽의 피연산자를 나눔
	% : 왼쪽의 피연산자에서 오른쪽의 피연산자를 나눈 나머지


----------------------------------------------- quiz (1)

#include<stdio.h>

int main() {
	
	int num1, num2, num3;
	num1 = 9 + 8 / 2 * 4;               	          // 25
	num2 = 8 - 12 * (2 + 2) / 8 % 2;	              // 8
	num3 = 1 % 3 * (1 + 3) * (12 / 6) % 10;		      // 8

	printf("%d %d %d", num1, num2, num3);
	return 0;
}

	(복합)대입 연산자

	= : 왼쪽의 피연산자에서 오른쪽의 피연산자를 대입함
	+= : 왼쪽의 피연산자와 오른쪽의 피연산자를 더한 후 왼쪽에 대입함
	-= : 왼쪽의 피연산자와 오른쪽의 피연산자를 뺀 후 왼쪽에 대입함
	*= : 왼쪽의 피연산자와 오른쪽의 피연산자를 곱한 후 왼쪽에 대입함
	/= : 왼쪽의 피연산자와 오른쪽의 피연산자를 나눈 후 왼쪽에 대입함
	%= : 왼쪽의 피연산자와 오른쪽의 피연산자를 나눈 후 나머지를 왼쪽에 대입함

  증감 연산자

	++NUM (전위 증가 연산자) : 값을 1증가시킨후 연산을 진행
	NUM++ (후위 증가 연산자) : 연산을 진행한 후 값을 1증가
	--NUM (전위 감소 연산자) : 값을 1감소시킨후 연산을 진행
	NUM-- (후위 감소 연산자) : 연산을 진행한 후 값을 1감소

----------------------------------------------- quiz (2)

#include<stdio.h>

int main() {
	
	int a = 5, b = 6, c = 10, d;

	d = ++a * b--;
	// a : 6 b : 5 c : 10 d : 36
	printf("%d %d %d %d \n", a, b, c, d);
	d = a++ + ++c - b--;
	// a : 7 b : 4 c : 11 d : 12
	printf("%d %d %d %d ", a, b, c, d);

	return 0;
}

  산술 연산자 

	+ : 왼쪽의 피연산자에서 오른쪽의 피연산자를 더함
	- : 왼쪽의 피연산자에서 오른쪽의 피연산자를 뺌
	* : 왼쪽의 피연산자에서 오른쪽의 피연산자를 곱함
	/ : 왼쪽의 피연산자에서 오른쪽의 피연산자를 나눔
	% : 왼쪽의 피연산자에서 오른쪽의 피연산자를 나눈 나머지

	비교 연산자

	== : 비교해서 같으면 1, 다르면 0
	!= : 비교해서 같으면 0, 다르면 1 
	>(=) : 비교해서 맞으면 1, 틀리면 0
	<(=) : 비교해서 맞으면 1, 틀리면 0
  
----------------------------------------------- quiz (3)
  
#include<stdio.h>

int main() {
	
	int num1 = 10,
		num2 = 20,
		num3 = 4,
		num4 = 13,
		num5 = 4;
	printf("%d\n",num1 == num2 ); // 0
	printf("%d\n",num4 != num1 ); // 1
	printf("%d\n",num4 > num2 ); // 0
	printf("%d\n",num5 >= num3 ); // 1
	printf("%d\n",num1 < num4 ); // 1
	printf("%d\n",num3 <= num1 ); //1 

	return 0;
}

  논리 연산자
	
	&&(AND연산) : 둘다 참이면 1
	||(OR연산) : 한쪽이 참이면 1
	! (NOT연산) : 참거짓 반전
  
----------------------------------------------- quiz (4)

#include<stdio.h>

int main() {

	int num1 = 10,
		num2 = 20,
		num3 = 4,
		num4 = 13,
		num5 = 4;

	printf("%d\n", num5 >= num3 || num1 == num2); // 1 
	printf("%d\n", num4 != num1 && num1 < num4); // 1
	printf("%d\n", num4 > num2 && num3 == num5); //  0
	printf("%d\n", !num5 > num3); // 0
	printf("%d\n", !(num1 > num4) || num3 <= num1); //  1 
	
	return 0;
}

  
  
  
  
  
  
  
  
  
  

